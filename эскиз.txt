+ Создать volume БД - docker volume create foodgram_pg_data
+ Запустить PostgreSQL в контейнере 
    docker run --name foodgram_db \
       --env-file .env \
       -v foodgram_pg_data:/var/lib/postgresql/data \
       postgres:13.10
    Посмотреть БД docker exec -it foodgram_db psql -U django_user -d foodgram_db
+ создать сеть нетворк - docker network create foodgram-network
+ объеденить БД и сеть нетворк  - docker network connect foodgram-network foodgram_db
+ прописать конфиг нджинкс
+ прописать докер для контейнеров
+ прописать докер для продакшена
-очистить сервак
-написать workflow .github/workflows, а в ней — файл main.yml.


1/ Установить на сервере Docker, Docker Compose:

    sudo apt install curl                                   - установка утилиты для скачивания файлов
    curl -fsSL https://get.docker.com -o get-docker.sh      - скачать скрипт для установки
    sh get-docker.sh                                        - запуск скрипта
    sudo apt-get install docker-compose-plugin              - последняя версия docker compose

2/ Скопировать на сервер файлы docker-compose.yml, nginx.conf из папки infra 
scp docker-compose.yml nginx.conf username@IP:/home/username/

    # username - имя пользователя на сервере
    # IP - публичный IP сервера

3/ GitHub Actions необходимо в репозитории в разделе Secrets > Actions создать переменные окружения:
    SECRET_KEY              - секретный ключ Django проекта
    DOCKER_PASSWORD         - пароль от Docker Hub
    DOCKER_USERNAME         - логин Docker Hub
    HOST                    - публичный IP сервера
    USER                    - имя пользователя на сервере
    PASSPHRASE              - *если ssh-ключ защищен паролем
    SSH_KEY                 - приватный ssh-ключ
    TELEGRAM_TO             - ID телеграм-аккаунта для посылки сообщения
    TELEGRAM_TOKEN          - токен бота, посылающего сообщение

    DB_ENGINE               - django.db.backends.postgresql
    DB_NAME                 - postgres
    POSTGRES_USER           - postgres
    POSTGRES_PASSWORD       - postgres
    DB_HOST                 - db
    DB_PORT                 - 5432 (порт по умолчанию)

4/ Запуск оркестра
    sudo docker-compose -f infra/docker-compose.yml up -d

5/ Выполнить миграции:
    sudo docker compose exec backend python manage.py migrate

6/ Собрать статику:
    sudo docker compose exec backend python manage.py collectstatic --noinput

7/ Наполнить базу данных содержимым из файла ingredients.json:
    sudo docker-compose -f infra/docker-compose.yml exec backend python /app/manage.py load_ingredients.py ../prepared_data/ingredients.json

8/ Создать суперпользователя:
    sudo docker compose exec backend python manage.py createsuperuser
Для остановки контейнеров Docker:

sudo docker compose down -v      - с их удалением
sudo docker compose stop         - без удаления
После каждого обновления репозитория (push в ветку master) будет происходить:



